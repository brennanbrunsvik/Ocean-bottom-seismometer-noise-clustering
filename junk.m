% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
%
% This script assumes these variables are defined:
%
%   cancerInputs - input data.
%   cancerTargets - target data.
load OBS_Working4Paper.mat; % Load OBS_Table
inputs = SomVals'; % this came from HELEN_SOM_....m
targetsString = string(prsvec(gind)); % Also came from same script
targets = targetsString == "DPG"; 
% targets = elev_vec(gind); 

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize);


% Set up Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;


% Train the Network
[net,tr] = train(net,inputs,targets, 'useParallel', 'yes','showResources','yes'); 
% [net,tr] = train(net,inputs,targets, 'useGPU', 'yes','showResources','yes'); 


% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
% figure, plotperform(tr)
% figure, plottrainstate(tr)
% figure, plotconfusion(targets,outputs)
% figure, ploterrhist(errors)
figure(1); clf; hold on; 
scatter(targets, outputs); 
xlabel('Targets'); 
ylabel('Outputs'); 
title('Water depth'); 


outputs2 = outputs; 
outputs2(outputs2>.5) = 1; 
outputs2(outputs2<=.5) = 0; 

correct = outputs2 == targets; 